								DAY 7
								
CANDIDATE KEY :-
		KEY WHICH THE HELP OF WHICH WE CAN IDENTIFY ECH RECORD OF YOUE TABLE UNIQUE....
		
		PRIMARY KEY - CANDIDATE KEY....
		
		CANDIDATE KEY WITH THE HELP IF UNIQUE KEY....
		
			TO IDENTIFIED A RECORD UNIQUELY IN A TABLE.....
	
	------------------------------------------------------------
								
Create table dep
(
id int primary key,
name varchar(20)
);

Insert into dept values(10,'Marketing'),(20,'HR'),(30,'FINANCE'),(40,'DEVELOPER');

Create table emp
(
id int primary key,
name varchar(20),
sal int,
deptno int,
mgr int
);

Insert into emp values(101,'Rajesh',4000,10,102),
(102,'Nikhil',5000,20,103),
(103,'RISHAB',6000,30,101),
(104,'JITESH',7000,20,102),(105,'PRIYANKA',8000,50,null);

=======================================================================

Topics Covered :- 
	
		Functions :-
			Numeric
			String
			Date
			Aggregated / Group 
			
		max,min,avg,sum,count.......
		
** Find the department wise salary

** Find the sale for every month

** You need to compare different years data....

Display the max salary, min salary and total salary provided each department

	Clause :- 
	
			GROUP BY 
			
	1) COLUMNS INCLUDED IN THE SELECT STATEMENT - NEED TO BE INCLUDED IN THE GROUP BY CLAUSE....
	2) COLUMNS A PART OF THE GROUP BY CLAUSE MAY OR MAY NOT BE A PART OF SELECT....
	
	
	DEPARTMENT WISE SALARY --------
	
	SELECT SUM(SALARY), MIN(SALARY),MAX(SALARY)
			FROM EMPLOYEES 
				WHERE DEPARTMENT_ID = 20;
				
	SELECT SUM(SALARY), MIN(SALARY),MAX(SALARY)
			FROM EMPLOYEES 
				WHERE DEPARTMENT_ID = 90;
				
				
	GROUP BY CLAUSE :- 
	
	SELECT DEPARTMENT_ID,SUM(SALARY), MIN(SALARY),MAX(SALARY)
			FROM EMPLOYEES
				GROUP BY DEPARTMENT_ID;
				
	1) FETCH THE DATA FROM THE DATABASE RELATED TO THE COLUMNS USED IN THE ABPVE QUERY AND CREATE A TEMP TABLE IN MY SESSION....
	
			SALARY, DEPARTMENT_ID...
			
	2) SORT THE DATA BASED ON THE COLUMNS INCLUDED IN THE GROUP BY CLAUSE...
			DEPARTMENT_ID - COLUMN
		
	
	3) CREATES GROUPS BASED ON THE COLUMN INCLUDED IN THE GROUP BY CLAUSE....

			GROUP CREATED BASED ON THE DEPARTMENT_ID
				
	
			
	4) GROUP FUNCTIONS OR AGGREGATED FUNCTION GOT EXECUTED AND RETURNS THE VALUES....

			SUM(SALARY), MIN(SALARY),MAX(SALARY)
			
		DEPARTMENT_ID 45455 345 5656
		
	5) DATA IS READY IN THE TEMP, IT TROWS THAT DATA TO THE CONSOLE AS A OUTPUT.....
	
-----------------------------------------------------------------------

ON TOP OF THE OUTPUT, IF WE WANT TO APPLY FILTER TO ACHIVE SOME JOBS LIKE 
	I NEED TO GET ALL THOSE GROUP WHOSE SUM(SALARY) >= 12000
	
	
	HAVING : 
		CLAUSE USED TO APPLY FILTER ON THE TOP OF THE OUTPUT 
				
				
				
	USAGE OF THE ALIAS WHICH WE ASSIGN TO THE COLUMNS 
			IS RESTRICTED ONLY WITH ORDER BY CLAUSE IN REST OF THE RDBMS
			
			
	MYSQL : ALLOWS ALIAS TO BE USED IN THE GROUP BY AND HAVING ALSO..
	

			SELECT
				FROM
					WHERE
						GROUP BY
							HAVING
								ORDER BY 
									LIMIT
	
======================================================================

** FIND THE NUMBER OF EMPLOYEES WORKING UNDER EACH MANAGER....

	SELECT COUNT(*) FROM EMPLOYEES
		WHERE MANAGER_ID = 101;
		

	SELECT COUNT(*) FROM EMPLOYEES
		WHERE MANAGER_ID = 102;		
		
		----
		
	SELECT MANAGER_ID,COUNT(*)
		FROM 
			EMPLOYEES 
				GROUP BY MANAGER_ID;

	===========================================
	
		** FIND THE NUMBER OF EMPLOYEES BASED ON THE MONTH OF THERE JOINING THE ORGANIZATION....
		
		------------
			MARCH 1986 20
			APRIL 1987 2
			.
			.
			.
			.
	------------------------------------------------------------------
	
NEED TO FIND THE DATA FROM MULTIPLE TABLES :- 

		CONCEPT OF JOINS ARRIVES......
		
		
		JOINS :- USED TO COMBINE TWO OR MORE TABLES 
				AND RETURNS ME THE EXPECTED RESULT FOR ALL THE TABLES USED...
				
				
	MULTIPLE JOINS  :-
	
	
1) INNER JOIN :- 

		* ALWAYS RETURN ME THE ROWS WHICH ARE COMMAN BASED ON THE CONDITION USED FOR JOINING TABLES....
		
SYNTAX :- 

		SELECT COLUMN NAMES SEPERATED WITH COMMA
			FROM 
				TABLE1 INNER JOIN TABLE2
					ON TABLE1.COLUMN OPERATOR TABLE2.COLUMN;
					
		NUMBER OF TABLES USED WHILE JOINS ARE n
			THEN WE NEED TO HAVE N-1 CONDITIONS TO JOIN TABLES....
		
			EMP, DEPT 
				ATLEST ONE CONDITION FOR JOINING EMP AND DEPT
			
			EMP,DEPT,JOBS
				ATLEAST 2 CONDITIONS..
					ONE FOR EMP AND DEPT 
					ONE FOR DEPT AND JOBS
					
					OR
					
					ONE FOR EMP AND DEPT 
					ONE FOR EMP AND JOBS
		
*******  FIND THE DATA OF ALL EMPLOYEES AND THERE DEPARTMENT NAMES....


			TWO TABLES :- 
				EMP AND DEPT
			CONDITION :-
				EMP.DEPTNO 	AND DEPT.ID
		
		
		SELECT *
				FROM
					EMP INNER JOIN DEPT 
						ON EMP.DEPTNO = DEPT.ID;


		SELECT FIRST_NAME , LAST_NAME FROM EMPLOYEES;
		
		
		SELECT EMPLOYEES.FIRST_NAME , EMPLOYEES.LAST_NAME 
				FROM EMPLOYEES;
		
			OBJECT OBJ :
				{
				VAR A;
				VAR B;
				VAR C;
				
				}
		
		OBJ :: OBJ.A, OBJ.B, OBJ.C


EMP :-

		ID , NAME, SAL, DEPTID MGRID
		
DEPT :- 
		DEPTID , DEPTNAME
		
		FROM EMP INNER JOIN DEPT 
			ON EMP.DEPTID = DEPT.DEPTID;
			
			
			
SELECT EMP.ID EMPLOYEEID,EMP.NAME ENAME,EMP.SAL ESAL,EMP.DEPTNO EDEPT,DEPT.NAME DEPTNAME
				FROM
					EMP INNER JOIN DEPT 
						ON EMP.DEPTNO = DEPT.ID
							WHERE EMP.SALARY > 5000
			
		SELECT ID,NAME,SAL,DEPTNO FROM EMPLOYEES WHERE SALARY > 5000
			
			
			
			
========================================================================

2) OUTER JOIN :
		LEFT JOIN 
		RIGHT JOIN
2.1) LEFT JOIN :- 

			** RETUNS ME THE RECORDS WHICH FULLFILL THE CONDITIONS PROVIDED 
			** + RETURNS ME THE ROWS LEFT AFTER COMPARISON FROM THE LEFT TABLE...
			
		SYNTAX :- 
		
		SELECT COLUMNS..
			FROM 
			 TABLE1 LEFT JOIN TABLE2 
				ON TABLE1.COLUMN = TABLE2.COLUMN
				
		SELECT * FROM 
			EMP LEFT JOIN  DEPT 
					ON EMP.DEPTNO = DEPT.ID;


=========================================================================

RIGHT JOIN :- 

		* RETUNS THE DATA WHICH FULFILL THE CONDITIONS...
		* RETUNS THE LEFT DATA FROM THE RIGHT TABLE WITH 
			NULL VALUES FOR THE LEFT SIDE TABLE COLUMN

SYNTAX:- 

	SELECT * FROM 
			EMP RIGHT JOIN  DEPT 
					ON EMP.DEPTNO = DEPT.ID;
					
					
=======================================================================


4) CROSS JOIN :-

				IS A JOIN BETWEEN TWO TABLES WITHOUT ANY CONDITION....
				
				EMP : 10 
				DEPT : 3
				
				TOTAL : 30
				
		SELECT * FROM 
				EMP JOIN DEPT;
				
		NEVER HELP IN ANY THING......
		
				JOIN WHICH HAS SOME MEANING...
					
					IF WE FORGOT TO HAVE A CONDITION BETWEEN TABLE FOR JOINING 
					
					IT WILL AUTOMATICALLY PERFORM 
							CROSS JOIN BETWEEN THEM....
							
							
			N TABLES FOR JOIN , N-1 CONDITION....

=======================================================================

JOIN : WHICH INTRODUCE BY ORCLE AND IMPLEMENTED BY REST ALL DATABASE...


				NATURAL JOIN....
				
					* NATURAL JOIN COMES WITH NO CONDTION...
					* NATURAL JOIN
						REFER THE TABLES IN WHICH JOIN IS PERFORMING...
						
						PULL THE COLUMNS WHICH HAS THE SAME SAME FROM THE TABLE AND APPLY QUALS CONDITION ON IT...
	IF : COMMAN COLUMN NAME				
					
			SELECT * FROM EMP
					NATURAL JOIN DEPT;
					
					
			EMP						DEPT
ID NAME SAL DEPTNO				ID 	NAME					
						
						
	COMMAN COLUMN NAME : ID,NAME....
	
	SELECT * FROM EMP 
			INNER JOIN DEPT ON EMP.ID = DEPT.ID AND EMP.NAME = DEPT.NAME;
			
			
 ---- ELSE :- NONE OF COLUMNS NAME MATCHES
				IT RETURNS A CROSS JOIN VALUES...
				
				
=========================================================================

SELF JOIN  :-

	EXAMPLE :- 
	
			EMP TABLE.....
			
				EMP TABLE YOU HAVE A COLUMN NAMED AS MGR(MANAGER_ID)
				
				MANAGER_ID DEFINATLY BE PRESENT IN THE EMPLOYEE_ID COLUMNS..
				
				AFTER :-
				
					EMP 
					
					ID AND MGR (IN RELATIONSHIP)
		
	AND SOMEBODY ASKED ME TO PRESENT A DATA 
		WHIH ALL EMPLOYEES AND THERE MANAGER NAMES.....
		
		101 RAHUL 20000 20 103
		102 NIKHIL 4556 30 104
		103 PRIYANKA 7877 30 101
		104 JITESH 3434 20 NULL
		
		-----------------------
		
		101'S(RAHUL) MANAGER IS 103....
		103'S NAME IS PRIYANKA
		
		
		RAHUL'S MANAGER IS PRIYANKA....
		
--------- 													------------

SELECT * 
		FROM 
			EMP E1 INNER JOIN EMP E2
				ON E1.MGR = E2.ID;


SELECT E1.EMPID,E1.EMPNAME,E1.SAL,E1.DEPTNO,E1.MGR AS MANAGERID,
		E2.EMPNAME AS 'MANAGER NAME'
		FROM 
			EMP E1 INNER JOIN EMP E2
				ON E1.MGR = E2.EMPID;
=======================================================================



SELECT JOBS.JOB_TITLE,
	DEPT.DEPARTMENT_ID, COUNT(*),SUM(EMP.SALARY) CONSOLIDATEDSAL
	FROM EMPLOYEES EMP
	INNER JOIN DEPARTMENTS DEPT ON EMP.DEPARTMENT_ID = DEPT.DEPARTMENT_ID
	INNER JOIN JOBS ON JOBS.JOB_ID = EMP.JOB_ID
		WHERE DEPT.DEPARTMENT_ID IN (20,10,50) 
			GROUP BY JOBS.JOB_TITLE,DEPT.DEPARTMENT_ID
				HAVING SUM(EMP.SALARY) > 13000
					ORDER BY CONSOLIDATEDSAL DESC 
						LIMIT 1;





SELECT EMPLOYEE_ID, DEPT.DEPARTMENT_ID 
	FROM EMPLOYEES EMP
	LEFT JOIN DEPARTMENTS DEPT ON EMP.DEPARTMENT_ID = DEPT.DEPARTMENT_ID
	INNER JOIN JOBS ON JOBS.JOB_ID = EMP.JOB_ID;


=========================JOIN'S END =================================
					 =====THANK YOU ====















