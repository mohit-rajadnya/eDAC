							DAY 8
						
Topics Covered :- 

				Types Of Joins :- 
					
						Inner Joins
						Outer Joins 
							Left Joins
							Right Joins
						CROSS Joins / CATESIAN PRODUCT
						NATURAL Joins
						SELF JOIN
			
	-----------------

			INNER JOIN WITH THE EQUALS OPERATORS ITS CALLED AS
														EQUIJOIN

			SELECT * FROM EMPOYEES E
							INNER JOIN DEPARTMENTS D
							ON E.DEPARTMENT_ID = D.DEPARTMENT_ID


			NON EQUIJOIN
				: PERFORM JOIN WITH OPERATOR ELSE THEN THE = OPERATOR THEN IS CALLED AS NON EQUIJOIN
				
				SELECT * FROM EMPOYEES E
							INNER JOIN DEPARTMENTS D
							ON E.DEPARTMENT_ID != D.DEPARTMENT_ID
				
				LEFT OUTER JOIN
						LEFT JOIN
				RIGHT OUTER JOIN
						RIGHT JOIN
				
FULL OUTER JOIN :- 
		
			* TAKES ALL THE ROWS FULLFILL THE CONDITION
			* TAKES ALL THE LEFT NON COMPARED ROWS FROM THE LEFT TABLE
			* TAKES ALL THE RIGHT NON COMPARED ROWS FROM THE RIGHT TABLE
			
			
			ORACLE :- 
			
				SELECT * FROM EMPLOYEES E
					FULL OUTER JOIN 
						DEPARTMENTS D
							ON E.DEPARTMENT_ID = D.DEPARTMENT_ID
				
			MYSQL :-
			
			1) LEFT JOIN 
			2) RIGHT JOIN 
			
			-------- UNION OF BOTH THE JOINS......
			
UNION : KEYWORD OR CLAUSE 
				WHICH ALLOWS USER TO MERGE TWO DIFFERENT QUERIES TOGEATHER....
		RULES :- 
		
			* BOTH THE QUERIES MUST HAVE SAME NUMBER OF COLUMNS...
			* BOTH THE QUERIES MUST HAVE SAME SEQUEANCE OF THE COLUMNS FETCHED DURING SELECT STATEMENT...
				DATATYPE...
			
FULL OUTER JOIN WITH THE HELP OF UNION :-

			SELECT * FROM EMPLOYEES E 
					LEFT JOIN DEPARTMENTS D
					ON E.DEPARTMENT_ID = D.DEPARTMENT_ID			
			UNION
			SELECT * FROM EMPLOYEES E 
					RIGHT JOIN DEPARTMENTS D
							ON E.DEPARTMENT_ID = D.DEPARTMENT_ID;


			1) MERGE THE OUTPUT OF BOTH THE QUERIES...
			2) REMOVE THE DUPLICATE ROWS....
				
			SELECT * FROM EMP E 
					LEFT JOIN DEPT D
					ON E.DEPTNO = D.ID			
			UNION
			SELECT * FROM EMP E 
					RIGHT JOIN DEPT D
							ON E.DEPTNO = D.ID;	
				
=================================================================

UNION ALL :- 
			1) MERGE THE OUTPUT OF BOTH THE QUERIES...
			2) RETUNS ALL THE ROWS (DUPLICATE RECORDS ALSO)..
			
			DUPLICATE MEANS : COMPLETE ROWS
					ALL THE VALUES OF THE ROWS ARE SAME....
			
			SELECT * FROM EMP E 
					LEFT JOIN DEPT D
					ON E.DEPTNO = D.ID			
			UNION ALL
			SELECT * FROM EMP E 
					RIGHT JOIN DEPT D
							ON E.DEPTNO = D.ID;	
				
===================================================================

	SUB QUERIES :- 
	
		1) QUERY INSIDE THE QUERY
		2) INLINE QUERIES
		
-------------------------------------------------------

		SELECT 
			COLUMN   --- SUB QUERIES
				FROM
					TABLE --- SUB QUERIES 
						WHERE 
							CONDITION --- SUB QUERIES
								GROUP BY 
									HAVING
										ORDER BY 
											LIMIT
				


SUB QUERIES IN WHERE CONDITION :- 

	EXAMPLE : FIND ALL THE EMPLOYEES WHOSE SALARY 
			IS GREATER THEN THE AVERAGE SALARY OF THE DEPARTMENT 20...
			
	
		1) AVERAGE SALARY OF THE DEPARTMENT 20
		2) NEED TO COMPARE EACH INDIVIDUAL SALARY 
				WITH THE OUTPUT OF STATEMENT 1
				
				
		* SELECT AVG(SALARY) FROM EMPLOYEES WHERE DEPARTMENT_ID = 20;
			RETURNS : 4000
		
		* SELECT * FROM EMPLOYEES
					WHERE SALARY > 4000;
					
					----
					
	** SELECT * FROM EMPLOYEES
					WHERE SALARY > (SELECT AVG(SALARY) FROM EMPLOYEES WHERE DEPARTMENT_ID = 20);
					
		EXECUTION :- 
		
				** SUB QUERY EXECUTED FIRST AND REPLACE THE OUTPUT INLINE WITH THE SUBQUERY..
				
		1) SELECT * FROM EMPLOYEES
					WHERE SALARY > (SELECT AVG(SALARY) FROM EMPLOYEES WHERE DEPARTMENT_ID = 20);		
					
		2) SELECT * FROM EMPLOYEES
					WHERE SALARY > (4000);
		
		
		---- RETUNING THE EMPLOYEES SALARY > 4000


		****** SUBQUERY ALWAYS RETURN SINGLE VALUE WHEN YOU ARE COMPARING
		WITH OPERATORS LIKE 
			
						= > < >= <= !=
						
						A = 5,3
						A > 8
			
-------------------------------------------------------------------------

** MULTIPLE VALUES 
				
				DEPARTMENT_ID IN (10,20,30); -- OR OPERATOR....
				
** FIND ALL THE EMPLOYEES WHOSE SALARY MATCHES THE SALARY OF THE DEPARTMENT 20
		
				* FIND THE SALARY OF THE DEPARTMENT 20
				
					SELECT SALARY FROM EMPLOYEES WHERE DEPARTMENT_ID = 20;
					
					6000, 13000
					
				* SELECT * FROM EMPLOYEES 
						WHERE 
							SALARY IN (6000, 13000);
							
							
** JOIN ABOVE QUERIES :- 

SELECT * FROM EMPLOYEES -- OUTER QUERY 
			WHERE 
				SALARY IN (SELECT SALARY FROM EMPLOYEES WHERE  DEPARTMENT_ID = 20 -- INNER QUERY
				)
				AND DEPARTMENT_ID != 20;




SELECT * FROM EMPLOYEES 
			WHERE 
				SALARY IN 
					(SELECT SALARY FROM EMPLOYEES WHERE  DEPARTMENT_ID = 50)
				AND JOB_ID IN 
					(SELECT JOB_ID FROM JOBS WHERE MIN_SALARY BETWEEN 4000 AND 10000);



====================================================================

** FIND ALL EMPLOYEES WHOSE SALARY IS GREATER THEN THE 
		SALARY OF DEPARTMENT 50;
		
	*** FIND SALARY FOR THE DEPARTMENT 50
	
		SELECT SALARY FROM EMPLOYEES WHERE DEPARTMENT_ID = 50;
		
	*** COMPARE EACH INDIVIDUAL'S SALARY  WITH 
			ALL VALUES RETURN FROM THE ABOVE QUERY..
			
		

THERE ARE OPERTORS INTODUCED :-

				ANY , ALL
				
				ANY MEANS : ANY OF THE VALUE RETURN FROM THE SUBQUERY
				ALL : ALL VALUES RETURN FROM THE SUBQUERY
				
				= ANY (SUBQUERY)
				> ANY 
				< ANY 
				> ALL 
				< ALL 
				
				
SELECT * FROM EMPLOYEES 
		WHERE SALARY 
				> ALL
				(SELECT SALARY FROM EMPLOYEES WHERE DEPARTMENT_ID = 50);
				
	EXECUTION  :- 
	
			** FINDS THE MAXIMUM VALUE FROM THE RESULT RETURN FOR THE SUB QUERY...
			** THEN COMPARE....
			
			
SELECT * FROM EMPLOYEES 
		WHERE SALARY 
				> ANY
				(SELECT SALARY FROM EMPLOYEES WHERE DEPARTMENT_ID = 50);			
				
			** FINDS THE MINIMUM VALUE FROM THE RESULT RETURN BY THE SUB QUERY..
			** THEN COMPARE...
			


SELECT * FROM EMPLOYEES 
		WHERE SALARY 
				>
				(SELECT MIN(SALARY) FROM EMPLOYEES WHERE DEPARTMENT_ID = 50);
=====================================================================

					IN /  ANY / ALL 
					
------------------

SELECT S1 FROM T1 WHERE S1 > ANY (TABLE T2);
SELECT S1 FROM T1 WHERE S1 = ANY (TABLE T2);
SELECT S1 FROM T1 WHERE S1 IN (TABLE T2);
SELECT S1 FROM T1 WHERE S1 > ALL (TABLE T2);
SELECT S1 FROM T1 WHERE S1 < ALL (TABLE T2);
SELECT S1 FROM T1 WHERE S1 <> ALL (TABLE T2);

<> NOT EUQLS TO

--
--
--

ALL :- 

SELECT * FROM EMPLOYEES 
		WHERE SALARY 
				> ALL
				(SELECT SALARY FROM EMPLOYEES WHERE DEPARTMENT_ID = 20);

SELECT * FROM EMPLOYEES 
		WHERE SALARY 
				> ALL
				(6000,13000);
				
				MAXIMUM : 13000
				
				SALARY > 13000 AUTOMATICALLY IT IS ALSO > 6000
				
				2000, 4000,1000,6000
				
				8000 > 2000
				8000 > 4000
				8000 > 1000
				8000 > 6000
				
				6000
				
				8000 > 6000

ANY :- ANY ONE OF THE CONDITION IS TRUE ....

			SALARY > (1000, 3000, 5000, 12000);
			
			SALARY > 1000 
				OR SALARY > 3000 
					OR SALARY > 5000 
						OR SALARY > 12000
			
=======================================================================

SUB QUERIES IN PLACE OF THE TABLE :- 

		1) QUERY ALWAYS RETUN DATA IN THE TABLE FORMAT...
		
** FIND ALL THE EMPLOYEES
		WHOSE SALARY IS EQUALS TO THE SALARY OF THE DEPARMTNE 50
		
		* FIND THE SALARY OF THE DEPARTMNET 50
		
		* I HAVE TO COMPARE SALARY WITH ALL THE EMPLOYEES
		
	
	SELECT EMPLOYEE_ID, SALARY FROM EMPLOYEES WHERE DEPARTMNET_ID = 50;


	SELECT * FROM 
		(SELECT EMPLOYEE_ID, SALARY FROM EMPLOYEES WHERE DEPARTMENT_ID = 50) T 
			WHERE T.SALARY > 6000;
			
=======================================================================
			
** SUBQUERIES OF COLUMN AND TABLES....


-- SELECT * FROM EMPLOYEES 
		WHERE SALARY 
				> ALL
				(SELECT SALARY FROM EMPLOYEES WHERE DEPARTMENT_ID = 50);
				
--- FIND THE OUTPUT DATA 
		DEPARMTNET_ID SUM SALARY 
		
--	FIND THE DEPARMTNET WITH THERE AVERAGE SALARY
		EXCLUDIN EMPLOYEES WHOSE SALARY > BY THE SALARY OF DEPARMTMET = 50
		
		
  ** PART1 : 
		FIND ALL THE EMPLOYEES WHOSE SALARY > BY THE SALARY OF DEPARMENT 50
		
	
		SELECT * FROM EMPLOYEES 
		WHERE SALARY 
				> ALL
				(SELECT SALARY FROM EMPLOYEES WHERE DEPARTMENT_ID = 50)
				
 ** PART 2 :- 
		DEPARTMENTS WITH THERE AVERAGE SALARY ....
		
SELECT 
		T.DEPARTMENT_ID , AVG(SALARY)
	FROM (
		SELECT * FROM EMPLOYEES 
		WHERE 
			SALARY > (SELECT MAX(SALARY) FROM EMPLOYEES WHERE DEPARTMENT_ID = 50)
		) T
		GROUP  BY T.DEPARTMENT_ID
		
		
		
------------------

SELECT 
* 
FROM (
SELECT 
		DEPARTMENT_ID,JOB_ID,AVG(SALARY) SAL
	FROM (
		SELECT DEPARTMENT_ID,JOB_ID,SALARY FROM EMPLOYEES 
		WHERE 
			SALARY > (SELECT MAX(SALARY) FROM EMPLOYEES WHERE DEPARTMENT_ID = 50)
		) T
		GROUP BY DEPARTMENT_ID,JOB_ID
) J
WHERE J.SAL > 12000
		

===================================================================

JOINS :- 

	FIND ALL THE EMPLOYEES WITH THERE DEPARTENTNAME WHO BELONGS TO JOB_ID = ST_CLERK
	
	
SELECT T.EMPLOYEE_ID,CONCAT(T.FIRST_NAME,', ',T.LAST_NAME) NAME,
D.DEPARTMENT_ID, D.DEPARTMENT_NAME
		FROM DEPARTMENTS D
		INNER JOIN 
			(SELECT * FROM EMPLOYEES WHERE JOB_ID = 'ST_CLERK') T
				ON T.DEPARTMENT_ID = D.DEPARTMENT_ID;
		
		
=====================================================================


1) SUB QUERIES IN PLACE OF YOUR COLUMNS :- 

	SELECT 
			COLUMN   -- SUBQUERY
					FROM 
						TABLE;
						
** NEED TO FIND EMPLOYEE NAME WITH DEPARMTNETNAME WITHOUT JOIN....


	** DATA IS COMING FROM TWO TABLES
			EMPLOYEESS AND DEPARTMENTS...
			
	---------------------------------------------------
	
	* FIRST FIND EMPLOYEE NAME AND DEPARTMENT ID FROM EMPLOYEES TABE
	
		SELECT CONCAT(FIRST_NAME,', ',LAST_NAME) NAME ,
				DEPARTMENT_ID 
					FROM EMPLOYEES LIMIT 3;
					
	
		SELECT CONCAT(E.FIRST_NAME,', ',E.LAST_NAME) NAME ,
		
		  (SELECT D.DEPARTMENT_NAME FROM DEPARTMENTS D
				WHERE D.DEPARTMENT_ID = E.DEPARTMENT_ID) DEPTNAME
		
				FROM EMPLOYEES E LIMIT 3;
				
		** EXECUTION PLAN OF THE SUBQUERY..
		
		CASE WHEN WE USE SUB QUERY IN PLACE OF YOUR COLUMN 
				MY SUBQUERY EXECUTED FOR EACH ROW
					OF THE OUTER QUERY...
					
		
		SELECT CONCAT(E.FIRST_NAME,', ',E.LAST_NAME) NAME ,
		  (SELECT D.DEPARTMENT_NAME FROM DEPARTMENTS D
				WHERE D.DEPARTMENT_ID = E.DEPARTMENT_ID) DEPTNAME
				 FROM EMPLOYEES E LIMIT 3;	

		EXECUTION PLAN :- 
		
			* OUTER QUERY RETUN FRST RECORDS
			 Steven, King   |            90
			 
			*SELECT CONCAT(E.FIRST_NAME,', ',E.LAST_NAME) NAME ,
		  (SELECT D.DEPARTMENT_NAME FROM DEPARTMENTS D
				WHERE D.DEPARTMENT_ID = 90) DEPTNAME
				FROM EMPLOYEES E LIMIT 3;
				
		  * NOW SUBQUERY EXECUTED.....
						Executive
						
		*Steven, King   |  Executive
			
				
				
		
		SELECT DEPARTMENT_NAME FROM DEPARTMENTS D
				WHERE D.DEPARTMENT_ID = 90;
				
==================================================================				
	
	CORRELATED QUERIESS....
	
	
** FIND ALL THE EMPLOYEES WHOSE SALARY IS GREATER THEN THE AVERAGE SALARY OF THEIR DEPARTMNET.....
	
		101 RAHUL 5000 20
		102 NIKHIL 5000 30
			

		* FIND THE EMPLOYEES DEPARTMENTID
		
		* NEED TO FIND THE AVERAGE SALARY OF DEPARTMENT 20
		
		* COMPARE SALARY OF THE INDIVIDUALS 
				WITH THE AVERAGE SALARY RETURN FROM 2 POINT
		

		SELECT DEPARTMENT_ID FROM EMPLOYEES WHERE EMPLOYEE_ID = 101;
		
		20
		
		SELECT AVG(SALARY) FROM EMPLOYEES WHERE DEPARTMENT_ID = 20;
		
				4545
				
		SELECT AVG(SALARY) FROM EMPLOYEES WHERE DEPARTMENT_ID = 30;
				5667
		
		SELECT * FROM EMPLOYEES WHERE SALARY > 4545
		
		SELECT * FROM EMPLOYEES WHERE SALARY > 5667
	
		101 RAHUL 5000 20
	
		SELECT * FROM 
				EMPLOYEES E1
					WHERE 
					E1.SALARY > 
							(SELECT AVG(E2.SALARY) 
							FROM EMPLOYEES E2
							 WHERE E2.DEPARTMENT_ID = E1.DEPARTMENT_ID);

		FIRST STEP : 
		101 RAHUL 5000 20
		SELECT * FROM 
				EMPLOYEES E1
					WHERE 
					E1.SALARY > 
							(SELECT AVG(E2.SALARY) 
							FROM EMPLOYEES E2
							 WHERE E2.DEPARTMENT_ID = E1.DEPARTMENT_ID);

		SECOND STEP :- 
		SELECT * FROM 
				EMPLOYEES E1
					WHERE 
					E1.SALARY > 
							(SELECT AVG(E2.SALARY) 
							FROM EMPLOYEES E2
							 WHERE E2.DEPARTMENT_ID = 20);

		THIRD STEP :- 
		SELECT * FROM 
				EMPLOYEES E1
					WHERE 
					5000 > 
							(4544);


---------------------------------------------------------------------

	SELECT * FROM 
				EMPLOYEES E1
					WHERE 
						E1.SALARY > 
							(SELECT AVG(E2.SALARY) 
									FROM EMPLOYEES
										WHERE E2.DEPARTMENT_ID = E1.DEPARTMENT_ID);
										
RELATING YOU OUTER QUERY WITH THE SUBQUERY 
				IN THIS CASE 
						SUB QUERY EXECUTED FOR EACH ROW RETURN
							FROM OUTER QUERY....
							
							
							
======================= LET DO PRACTICE IN LAB 	==	

					-------- THANK YOU -----------
							
							
							
							
							

		


				
				
				
				
				
				
				